C# 繼承如何使用

在 C# 中，繼承是面向對象程式設計中的一個核心概念，讓一個類別（子類別）可以繼承另一個類別（父類別）的屬性和方法。這樣可以實現程式碼的重用並促進類別之間的關係。
class 父類別
{
    public int 變數;

    public void 方法()
    {
        Console.WriteLine("這是父類別的方法");
    }
}

class 子類別 : 父類別
{
    public void 子類別方法()
    {
        Console.WriteLine("這是子類別的方法");
    }
}
例子
假設我們有一個 動物 類別作為父類別，並且我們希望創建一個 狗 類別繼承自 動物 類別，這樣 狗 就可以擁有 動物 的屬性和方法：
using System;

class 動物
{
    public string 名字;

    public void 吃()
    {
        Console.WriteLine("這隻動物在吃東西");
    }
}

class 狗 : 動物
{
    public void 吠()
    {
        Console.WriteLine("這隻狗在吠");
    }
}

class Program
{
    static void Main()
    {
        狗 myDog = new 狗();
        myDog.名字 = "小白";
        myDog.吃();  // 從父類別繼承的功能
        myDog.吠();  // 子類別新增的功能
    }
}
輸出：

這隻動物在吃東西
這隻狗在吠
關於繼承的幾個注意事項：
單一繼承：C# 是單一繼承，也就是一個類別只能繼承一個父類別，但可以實現多個介面。
基礎建構子：如果父類別有建構子，子類別必須使用 base 關鍵字來呼叫父類別的建構子。
覆寫方法 (Override)：子類別可以覆寫父類別的方法來實現自訂的行為。
覆寫方法範例：

using System;

class 動物
{
    public virtual void 吃()
    {
        Console.WriteLine("這隻動物在吃東西");
    }
}

class 狗 : 動物
{
    public override void 吃()
    {
        Console.WriteLine("這隻狗在吃狗食");
    }
}

class Program
{
    static void Main()
    {
        狗 myDog = new 狗();
        myDog.吃();  // 呼叫子類別的覆寫方法
    }
}
輸出：

這隻狗在吃狗食
這樣，透過繼承與方法覆寫，我們可以讓子類別實現不同於父類別的行為。


你說：
狗 myDog = new 狗();
是在做以下幾件事：

創建物件：new 狗() 會創建一個 狗 類別的實例，也就是創造一隻狗的物件。這個物件是 狗 類別的具體實體，它擁有 狗 類別裡定義的屬性和方法。

賦值給變數：myDog 是一個 狗 類型的變數，將創建的 狗 物件賦值給這個變數。這樣，myDog 就成為了一隻狗，你可以通過這個變數來訪問或操作該 狗 物件的屬性和方法。

簡單來說，這行程式碼就是創建了一隻狗，並且命名為 myDog，接下來可以用這個變數來操作這隻狗的動作。

例如，像這樣：

myDog.名字 = "小白";  // 設定狗的名字
myDog.吃();          // 呼叫狗的吃方法
myDog.吠();          // 呼叫狗的吠方法
myDog 這個變數就代表了那隻狗，你可以對它進行操作。
